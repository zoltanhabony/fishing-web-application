generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Enums
enum UserRole {
  ADMIN
  OPERATOR
  INSPECTOR
  USER
}

enum WaterAreaType {
  RIVER_WATER
  STILL_WATER
  TOTAL_WATER_AREA
}

model Access {
  id                String  @id @default(cuid())
  userId            String  @unique
  accessToLogbook   Boolean
  accessToAuthority Boolean
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?                @unique
  firstName             String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime               @default(now()) @updatedAt @db.Timestamptz(3)

  accounts Account[]
  access   Access[]
  member   Member[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

//Core Functions User-Logbook-Authority

model Member {
  id                 String @id @default(cuid())
  userId             String
  fisheryAuthorityId String

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  fisheryAuthority FisheryAuthority @relation(fields: [fisheryAuthorityId], references: [id])
}

model FisheryAuthority {
  id                   String @id @default(cuid())
  fisheryAuthorityName String @unique
  taxId                String @unique
  waterAreaId String
  addressId String @unique 

  member Member[]
  waterArea WaterArea @relation(fields: [waterAreaId], references: [id])
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}


//Helper
model Address {
  id           String @id @default(cuid())
  cityId       String
  streetName   String
  streetNumber Int
  floor        Int?
  door         Int?
  fisheryAuthority FisheryAuthority?
  city City @relation(fields: [cityId], references: [id]) 
}

model City {
  id     String @id @default(cuid())
  postalCode Int
  cityName   String
  countyName String
  address Address []
}

model WaterArea {
  id     String @id @default(cuid())
  waterAreaCode String @unique
  waterAreaName String
  waterAreaType  WaterAreaType
  fisheryAuthority FisheryAuthority[]
}


model WaterAreaRule {
  id     String @id @default(cuid())
  waterAreaId String
  fishId String
  constraintId String

  fish Fish @relation(fields: [fishId], references: [id])
  constraint Constraint @relation(fields: [constraintId], references: [id])
}

model Fish {
  id     String @id @default(cuid())
  fishCode       Int?     @unique
  fishName String
  fishImageURL String

  waterAreaRule WaterAreaRule[]
}


model Constraint {
  id     String @id @default(cuid())
  weightLimit Decimal?
  lengthLimit Decimal?
  pieceLimit Int?
  banPeriodStart DateTime?
  banPeriodEnd DateTime?
  waterAreaRule WaterAreaRule[]
}
//Tokens

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
