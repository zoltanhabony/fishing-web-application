generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Enums
enum UserRole {
  ADMIN
  OPERATOR
  INSPECTOR
  USER
}

enum WaterAreaType {
  RIVER_WATER
  STILL_WATER
  TOTAL_WATER_AREA
}

enum UnitType {
  MASS
  LENGTH
  TEMPERATURE
  PIECE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?                @unique
  firstName             String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @db.Date
  updatedAt             DateTime               @default(now()) @updatedAt @db.Date

  accounts  Account[]
  access    Access[]
  member    Member[]
  IsFishing IsFishing[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Access {
  id                String  @id @default(cuid())
  userId            String  @unique
  accessToLogbook   Boolean
  accessToAuthority Boolean
  accessToFishing   Boolean
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//Core Functions User-Logbook-Authority

model IsFishing {
  id     String   @id @default(cuid())
  userId String   @unique
  date   DateTime @db.Date

  user User @relation(fields: [userId], references: [id])
}

model Member {
  id                 String  @id @default(cuid())
  userId             String
  fisheryAuthorityId String
  logbookId          String? @unique

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  fisheryAuthority FisheryAuthority @relation(fields: [fisheryAuthorityId], references: [id])
  logBook          Logbook?         @relation(fields: [logbookId], references: [id], onDelete: Cascade)
  Map              Map[]
  Marker           Marker[]
  post             Post[]
}

model Logbook {
  id           String   @id @default(cuid())
  serialNumber String   @default(cuid())
  expiresDate  DateTime @db.Date
  createdAt    DateTime @default(now()) @db.Date
  member       Member?
  Catch        Catch[]
}

model FisheryAuthority {
  id                   String @id @default(cuid())
  fisheryAuthorityName String @unique
  taxId                String @unique
  waterAreaId          String
  addressId            String @unique

  member    Member[]
  waterArea WaterArea @relation(fields: [waterAreaId], references: [id])
  address   Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Map       Map?
  post      Post[]
}

model Catch {
  id          String   @id @default(cuid())
  logbookId   String
  waterAreaId String
  fishId      String
  createdAt   DateTime @default(now())
  isInjured   Boolean?
  detailId    String   @unique @default(cuid())
  isStored    Boolean  @default(false)

  logbook      Logbook        @relation(fields: [logbookId], references: [id], onDelete: Cascade)
  waterArea    WaterArea      @relation(fields: [waterAreaId], references: [id])
  fish         Fish           @relation(fields: [fishId], references: [id])
  CatchDetails CatchDetails[]
}

model CatchDetails {
  id       String  @id @default(cuid())
  value    Decimal
  unitId   String
  detailId String

  catch Catch @relation(fields: [detailId], references: [detailId], onDelete: Cascade)
  unit  Unit  @relation(fields: [unitId], references: [id])
}

model Unit {
  id           String         @id @default(cuid())
  unitType     UnitType
  unitName     String
  unitAcronyms String
  CatchDetails CatchDetails[]
}

//Helper
model Address {
  id               String            @id @default(cuid())
  cityId           String
  streetName       String
  streetNumber     Int
  floor            Int?
  door             Int?
  fisheryAuthority FisheryAuthority?
  city             City              @relation(fields: [cityId], references: [id])
}

model City {
  id         String    @id @default(cuid())
  postalCode Int
  cityName   String
  countyName String
  address    Address[]
}

model WaterArea {
  id               String             @id @default(cuid())
  waterAreaCode    String             @unique
  waterAreaName    String
  waterAreaType    WaterAreaType
  fisheryAuthority FisheryAuthority[]
  Catch            Catch[]
}

model WaterAreaRule {
  id           String @id @default(cuid())
  waterAreaId  String
  fishId       String
  constraintId String

  fish       Fish       @relation(fields: [fishId], references: [id])
  constraint Constraint @relation(fields: [constraintId], references: [id])
}

model Fish {
  id           String @id @default(cuid())
  fishCode     Int?   @unique
  fishName     String
  fishImageURL String

  waterAreaRule WaterAreaRule[]
  Catch         Catch[]
}

model Constraint {
  id             String          @id @default(cuid())
  minWeightLimit Decimal?
  maxWeightLimit Decimal?
  minLengthLimit Decimal?
  maxLengthLimit Decimal?
  pieceLimit     Int?
  banPeriodStart DateTime?
  banPeriodEnd   DateTime?
  waterAreaRule  WaterAreaRule[]
}

//Map

model Map {
  id                 String  @id @default(cuid())
  lat                Decimal
  long               Decimal
  zoom               Int
  memberId           String
  fisheryAuthorityId String  @unique

  fisheryAuthority FisheryAuthority @relation(fields: [fisheryAuthorityId], references: [id])
  member           Member           @relation(fields: [memberId], references: [id])
  Marker           Marker[]
}

model Marker {
  id           String   @id @default(cuid())
  lat          Decimal
  long         Decimal
  mapId        String
  memberId     String
  title        String
  info         String
  markerTypeId String
  createdAt    DateTime @default(now()) @db.Date

  map        Map        @relation(fields: [mapId], references: [id])
  member     Member     @relation(fields: [memberId], references: [id])
  markerType MarkerType @relation(fields: [markerTypeId], references: [id])
}

model MarkerType {
  id        String   @id @default(cuid())
  type      String
  markerURL String
  marker    Marker[]
}

//Post
model Post {
  id                 String @id @default(cuid())
  mainTitle          String
  summary            String
  content            String
  memberId           String
  fisheryAuthorityId String

  member           Member           @relation(fields: [memberId], references: [id])
  fisheryAuthority FisheryAuthority @relation(fields: [fisheryAuthorityId], references: [id])
}

//Tokens

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
